###################
### KEYBINDINGS ###
###################
# See https://wiki.hyprland.org/Configuring/Keywords/
# Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
#$terminal = uwsm app -- ghostty
$terminal = ghostty +new-window
$terminator = uwsm app -- terminator
$fileManager = uwsm app -- nautilus
$menu = rofi -show drun -run-command 'uwsm app -- {cmd}'
$brave-app = uwsm app -- brave --app

$mainMod = SUPER # Sets "Windows" key as main modifier
$altMod = ALT
$bluectl = ~/.local/bin/bluectl_rofi
$wifictl = ~/.local/bin/network_menu
$wm-exit = ~/.local/bin/wm-exit
$grafana_lxd = ~/.local/bin/grafana-lxd.py --rofi
$missgpt = $brave-app=https://chatgpt.com
$linear = $brave-app=https://linear.app/dwellir

bind = $altMod + SHIFT, Return, exec, $terminal
bind = $altMod, Return, exec, $terminator
bind = $altMod, Space, exec, $menu
bind = $altMod, E, exec, $fileManager
bind = $altMod, F9, exec, $bluectl
bind = $altMod, F10, exec, $wifictl
bind = $altMod, c, exec, $missgpt
bind = $altMod, l, exec, $linear 

# Screenrecord keybinds
bind = $altMod, F11, exec, sh -c 'state=/tmp/wf-recorder.pid; dir="$HOME/Videos/Screenrecords"; mkdir -p "$dir"; if [ -r "$state" ] && kill -0 "$(cat "$state")" 2>/dev/null; then kill -INT "$(cat "$state")" 2>/dev/null; rm -f "$state"; f="$dir/latest.mkv"; [ -f "$f" ] && notify-send -a recorder "Recording stopped" "$f" || notify-send -a recorder "Recording stopped"; else geo=$(slurp); [ -n "$geo" ] || { notify-send -a recorder "Recording canceled"; exit 0; }; file="$dir/wf-$(date +%F_%H-%M-%S).mkv"; ln -sf -- "$file" "$dir/latest.mkv"; ( wf-recorder -g "$geo" -c h264_vaapi -f "$file" & echo $! > "$state" ) >/dev/null 2>&1 & notify-send -a recorder "Recording started" "$file"; fi'
bind = $altMod + SHIFT, F11, exec, sh -c 'state=/tmp/wf-recorder.pid; dir="$HOME/Videos/Screenrecords"; mkdir -p "$dir"; if [ -r "$state" ] && kill -0 "$(cat "$state")" 2>/dev/null; then kill -INT "$(cat "$state")" 2>/dev/null; rm -f "$state"; notify-send -a recorder "Recording stopped" "$dir/latest.mkv"; else rect="$(hyprctl clients -j | jq -r ".[] | \"\\(.at[0]),\\(.at[1]) \\(.size[0])x\\(.size[1]) \\(.class)\"" | slurp -r)"; [ -n "$rect" ] || { notify-send -a recorder "Recording canceled"; exit 0; }; file="$dir/wf-$(date +%F_%H-%M-%S).mkv"; ln -sf -- "$file" "$dir/latest.mkv"; ( wf-recorder -g "$rect" -c h264_vaapi -f "$file" & echo $! > "$state" ) >/dev/null 2>&1 & notify-send -a recorder "Recording started" "$file"; fi'
bind = $mainMod + $altMod + SHIFT, F11, exec, sh -c 'state=/tmp/wf-recorder.pid; dir="$HOME/Videos/Screenrecords"; mkdir -p "$dir"; if [ -r "$state" ] && kill -0 "$(cat "$state")" 2>/dev/null; then kill -INT "$(cat "$state")" 2>/dev/null; rm -f "$state"; notify-send -a recorder "Recording stopped" "$dir/latest.mkv"; else out="$(slurp -o -f "%o")"; [ -n "$out" ] || { notify-send -a recorder "Recording canceled"; exit 0; }; file="$dir/wf-$(date +%F_%H-%M-%S).mkv"; ln -sf -- "$file" "$dir/latest.mkv"; ( wf-recorder -o "$out" -c h264_vaapi -f "$file" & echo $! > "$state" ) >/dev/null 2>&1 & notify-send -a recorder "Recording started" "$file"; fi'

# Screenshot keybinds
bind = , PRINT, exec, sh -c 'dir="$HOME/Pictures/Screenshots"; mkdir -p "$dir"; name="$(date +hyprshot-%Y%m%d-%H%M%S).png"; path="$dir/$name"; ln -sf -- "$path" "$dir/latest.png"; hyprshot -m region -z -o "$dir" -f "$name" && notify-send -a Hyprshot "Screenshot" "$path" || rm -f "$dir/latest.png"'
bind = $altMod, PRINT, exec, sh -c 'dir="$HOME/Pictures/Screenshots"; mkdir -p "$dir"; name="$(date +hyprshot-%Y%m%d-%H%M%S).png"; path="$dir/$name"; ln -sf -- "$path" "$dir/latest.png"; hyprshot -m window -z -o "$dir" -f "$name" && notify-send -a Hyprshot "Screenshot" "$path" || rm -f "$dir/latest.png"'
bind = $altMod + SHIFT, PRINT, exec, sh -c 'dir="$HOME/Pictures/Screenshots"; mkdir -p "$dir"; name="$(date +hyprshot-%Y%m%d-%H%M%S).png"; path="$dir/$name"; ln -sf -- "$path" "$dir/latest.png"; hyprshot -m output -z -o "$dir" -f "$name" && notify-send -a Hyprshot "Screenshot" "$path" || rm -f "$dir/latest.png"'

# Lock, kill, exit, quit
bind = $mainMod + SHIFT, L, exec, pidof hyprlock >/dev/null || hyprlock
bind = $mainMod + SHIFT, C, killactive
bind = $mainMod + SHIFT, Q, exec, $wm-exit
bind = $mainMod + CONTROL + SHIFT, Q, exit

# Layout
bind = $mainMod, V, togglefloating,
bind = $mainMod, P, pseudo, # dwindle
bind = $mainMod, Return, swapsplit, # dwindle
bind = $mainMod, T, togglesplit, # dwindle
bind = $mainMod, F, fullscreen, 0
bind = $mainMod+SHIFT, F, fullscreen, 1

# Move focus with mainMod + arrow keys
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d
# Move focus with mainMod + vim keys
bind = $mainMod, H, movefocus, l
bind = $mainMod, L, movefocus, r
bind = $mainMod, K, movefocus, u
bind = $mainMod, J, movefocus, d

# Cycle focus to next window on a workspace
bind = $mainMod + SHIFT, J, cyclenext,

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Swap active window
bind = $mainMod SHIFT, left, swapwindow, l
bind = $mainMod SHIFT, right, swapwindow, r
bind = $mainMod SHIFT, up, swapwindow, u
bind = $mainMod SHIFT, down, swapwindow, d

# Resize active window
bind = $mainMod CONTROL, LEFT, resizeactive, -50 0
bind = $mainMod CONTROL, RIGHT, resizeactive, 50 0
bind = $mainMod CONTROL, UP, resizeactive, 0 -50
bind = $mainMod CONTROL, DOWN, resizeactive, 0 50

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspacesilent, 1
bind = $mainMod SHIFT, 2, movetoworkspacesilent, 2
bind = $mainMod SHIFT, 3, movetoworkspacesilent, 3
bind = $mainMod SHIFT, 4, movetoworkspacesilent, 4
bind = $mainMod SHIFT, 5, movetoworkspacesilent, 5
bind = $mainMod SHIFT, 6, movetoworkspacesilent, 6
bind = $mainMod SHIFT, 7, movetoworkspacesilent, 7
bind = $mainMod SHIFT, 8, movetoworkspacesilent, 8
bind = $mainMod SHIFT, 9, movetoworkspacesilent, 9
bind = $mainMod SHIFT, 0, movetoworkspacesilent, 10

# Example special workspace (scratchpad)
bind = $mainMod, S, togglespecialworkspace, magic
bind = $mainMod SHIFT, S, movetoworkspace, special:magic
bind = $mainMod, A, togglespecialworkspace, linear
bind = $mainMod SHIFT, A, movetoworkspace, special:linear
bind = $mainMod, D, togglespecialworkspace, chatgpt
bind = $mainMod SHIFT, D, movetoworkspace, special:chatgpt

# Scroll through existing workspaces with mainMod + scroll
#bind = $mainMod, mouse_down, workspace, e+1
#bind = $mainMod, mouse_up, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# Laptop multimedia keys for volume and LCD brightness
bindel = ,XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
bindel = ,XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindel = ,XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindel = ,XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle
bindel = ,XF86MonBrightnessUp, exec, brightnessctl s 10%+
bindel = ,XF86MonBrightnessDown, exec, brightnessctl s 10%-

# Requires playerctl
bindl = , XF86AudioNext, exec, playerctl next
bindl = , XF86AudioPause, exec, playerctl play-pause
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioPrev, exec, playerctl previous
