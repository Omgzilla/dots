# System
alias ls="ls --color=auto"
alias l="ls -lC --color=auto"
alias ll="ls -al --color=auto"
alias la="ls -A --color=auto"
alias grep="grep --color=auto"
alias egrep="egrep --color=auto"
alias fgrep="fgrep --coolor=auto"
alias find="find . -name"
alias cp="cp -iv"
alias mv="mv -iv"
alias rm="rm -iv"
alias mkdir="mkdir -pv"
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias ip="ip -c"
alias jc="sudo journalctl"
alias sc="sudo systemctl"
alias w="watch -n 1 -c"
alias ping="ping -O"
alias cd="z"
alias sshr='ssh-keygen -f "/home/marcus/.ssh/known_hosts" -R "$@"'
# Package manager
alias apt="sudo apt"
alias pac="sudo pacman"
alias yay="yay --aur"
alias brup="brew update -v && brew upgrade -v"
alias bri="brew install -v"
alias brs="brew search -v"
# VIM
alias v="nvim"
alias vi="nvim"
alias vim="nvim"
alias sv="sudo nvim"
# VSCode
#alias code="codium"
alias wind="windsurf"
# Config files
alias aliasrc='nvim ~/.config/shell/aliasrc'
alias brc='nvim ~/.bashrc'
alias bsrc="source ~/.bashrc"
alias ghostrc="nvim ~/.config/ghostty/config"
alias hyprrc='nvim ~/.config/hypr/'
alias kittyrc='nvim ~/.config/kitty/kitty.conf'
alias termrc='nvim ~/.config/terminator/config'
alias vimrc='nvim ~/.config/nvim/'
alias zrc='nvim ~/.config/zsh/.zshrc'
alias zsrc="source ~/.config/zsh/.zshrc"
# Suckless
alias makedwm='cd ~/.local/suckless/dwm && make && rm config.h'
alias makedmenu='cd ~/.local/suckless/dmenu && make && rm config.h && rm patches.h'
# Git
alias ga="git add"
alias gs="git status"
alias gcmsg="git commit -m" # Commit changes
alias gb="git branch" # List branches
alias gcb="git checkout -b" # Checkout new branch
alias gf="git fetch"
alias gft="git fetch --tags"
alias gp="git pull"
alias lg="lazygit"
# Permissions
alias 000='chmod 000'
alias 640='chmod 640'
alias 644='chmod 644'
alias 755='chmod 755'
alias 775='chmode 775'
alias ux='chmod u+x'
# Nix on darwin
alias nix-update='nix flake update --flake ~/.dotfiles/nix/flake.nix && sudo -i nix run nix-darwin -- switch --flake ~/.dotfiles/nix#omg-mac'
# Juju
alias js="juju status --color"
alias jsr="juju status --color --relations"
alias wjs="watch -n 1 -c juju status --color"
alias wjsr="watch -n 1 -c juju status --color --relations"
alias jm="juju models --all"
alias jmg="juju models --all | grep $1"
alias jgm='function _jgm(){ juju grant omgzilla@external admin $(juju show-model --format json | jq -r ".[].name" | head -n 1); }; _jgm'
alias jgmm='function _jgmm(){ juju grant marcus-segerbjer admin $(juju show-model --format json | jq -r ".[].name" | head -n 1); }; _jgmm'
alias jc="juju controllers"
alias jcf="juju config"
alias jcfq='function _jcfq(){ juju config $1 | yq; }; _jcfq'
alias ja="juju actions"
alias jr="juju run"
alias jar="juju relate"
alias jdr="juju remove-relation"
alias jssh="juju ssh"
alias jassh="juju add-ssh-key '$(cat ~/.ssh/id_rsa.pub)'"
alias jssj='function _jssj(){ juju ssh ${1:-0} -- journalctl -f -n ${2:-100} ${3}; }; _jssj'
alias jscp="juju scp"
alias jsw="juju switch"
alias jswu="juju switch munin" # site-lab
alias jswk="juju switch frej" # site-kista
alias jswl="juju switch obatala" # site-lagos
alias jswp="juju switch tor" # site-pionen
alias jsws="juju switch lungmo" # site-singapore
alias jswt="juju switch baal" # site-tunis
alias jswa="juju switch hyperborea" # site-aws-eu
alias jswj="juju switch janus" # site-aws-us
alias jswh="juju switch local" # localhost
#alias jwm='function _jwm(){ juju switch $(juju models --all | grep "$@" | awk "{print $1}" | head -n 1); }; _jwm'
alias jfi="/usr/bin/python3 $HOME/versioned/dwellir-public/ops/juju/scripts/find-instance.py --id $1"
alias jfip="/usr/bin/python3 $HOME/versioned/dwellir-public/ops/juju/scripts/find-instance.py --ip $1"
alias jfm="/usr/bin/python3 $HOME/versioned/dwellir-public/ops/juju/scripts/find-models.py --pattern $1"
alias jfo="/usr/bin/bash $HOME/versioned/dwellir-public/ops/juju/scripts/orphaned-instances.sh"
alias jam="/usr/bin/python3 $HOME/versioned/dwellir-public/ops/juju/scripts/all-models.py"
# Netbox
alias nq="$HOME/versioned/dwellir-public/ops/random/netbox-scripts/netbox-query/netbox-query.py"
alias nqd="$HOME/versioned/dwellir-public/ops/random/netbox-scripts/netbox-query/netbox-query.py device"
alias nqi="$HOME/versioned/dwellir-public/ops/random/netbox-scripts/netbox-query/netbox-query.py ipam"
alias nqv="$HOME/versioned/dwellir-public/ops/random/netbox-scripts/netbox-query/netbox-query.py vm"
# Other scripts
alias blockdiff="/usr/bin/python3 $HOME/versioned/dwellir-public/ops/juju/scripts/blockdiff.py"
alias compare-blocks="~/versioned/dwellir-public/ops/random/compare-blocks.sh"
alias disable-backend="/usr/bin/python3 $HOME/versioned/dwellir-public/ops/haproxy/scripts/disable_backend.py"
alias enable-backend="/usr/bin/python3 $HOME/versioned/dwellir-public/ops/haproxy/scripts/enable_backend.py"
alias pull-gslb="/usr/bin/python3 ./scripts/pull_gslb_config.py"
alias push-gslb="/usr/bin/python3 ./scripts/push_gslb_config.py"
alias pull-haproxy="/usr/bin/python3 ./scripts/pull_haproxy_config.py"
alias push-haproxy="/usr/bin/python3 ./scripts/push_haproxy_config.py"
# Add an "alert" after a long running command, like: sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
# SSH
alias sshremove='ssh-keygen -f "$HOME/.ssh/known_hosts" -R'


# SSH into Cisco older models
_cisco() 
{ 
  [ $# -eq 2 ] || { echo "Usage: cisco <user> <host>"; return 1; }; 
  ssh -o KexAlgorithms=diffie-hellman-group-exchange-sha1 -o HostKeyAlgorithms=ssh-rsa -o Ciphers=aes256-cbc -o ServerAliveInterval=60 -o ServerAliveCountMax=3 "$1@$2"; 
}
alias cisco='_cisco'

# SSH into Cisco 4500 models
_cisco45() 
{ 
  [ $# -eq 2 ] || { echo "Usage: cisco45 <user> <host>"; return 1; }; 
  ssh -o KexAlgorithms=diffie-hellman-group-exchange-sha1 -o HostKeyAlgorithms=ssh-rsa -o Ciphers=aes256-ctr -o ServerAliveInterval=60 -o ServerAliveCountMax=3 "$1@$2"; 
}
alias cisco45='_cisco45'

# Get substrate genesis hash
_get-substrate-genesis-hash () 
{ 
  local url="$1";
  if [[ -z "$url" ]]; then
      echo "Usage: get-genesis-hash <host[:port]> (with or without http[s]://)";
      return 1;
  fi;
  if [[ ! "$url" =~ ^https?:// ]]; then
      url="http://$url";
  fi;
  if [[ ! "$url" =~ :[0-9]+$ ]]; then
      url="${url}:9933";
  fi;
  local genesis=$(curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","id":1,"method":"chain_getBlockHash","params":[0]}' "$url" | jq -r .result);
  local chain=$(curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","id":2,"method":"system_chain","params":[]}' "$url" | jq -r .result);
  local paraId=$(curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","id":3,"method":"state_getStorage","params":["0x/parachainid"]}' "$url" | jq -r .result 2> /dev/null);
  if [[ "$paraId" == "null" || -z "$paraId" ]]; then
      paraId=$(curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","id":4,"method":"parachainInfo_parachainId","params":[]}' "$url" | jq -r .result 2> /dev/null);
  fi;
  if [[ "$paraId" == "null" || -z "$paraId" ]]; then
      echo "${chain:-Unknown chain} genesis hash: $genesis";
  else
      echo "${chain:-Unknown chain} (ParaID $paraId) genesis hash: $genesis";
  fi
}
alias get-substrate-genesis-hash='_get-substrate-genesis-hash'

# Search system-parachains in current controller
_system-parachains ()
{
  parachains=("asset-hub" "bridge-hub" "passet-hub" "collectives" "coretime" "people" "statemin" "westmint")
  for chain in "${parachains[@]}"; do
    juju models | grep "$chain" | awk '{print $1}'
  done
}
alias system-parachains="_system-parachains"

# Search models pick closest match
_jwm () {
  local out term
  out="$(juju models --all)"

  # AND-filter by all provided terms (literal, case-insensitive)
  for term in "$@"; do
    out="$(printf "%s\n" "$out" | grep -Fi -- "$term")" || out=""
  done

  # Extract the first column (model id/name); drop blank/header lines; unique
  local -a models
  mapfile -t models < <(
    printf "%s\n" "$out" \
    | grep -vE '^(Controller|MODEL)\b' \
    | awk '{print $1}' \
    | sed '/^$/d' \
    | sort -u
  )

  if (( ${#models[@]} == 0 )); then
    echo "No model matches: $*"
    return 1
  elif (( ${#models[@]} == 1 )); then
    juju switch "${models[0]}"
  else
    local choice
    if command -v fzf >/dev/null 2>&1; then
      choice="$(printf "%s\n" "${models[@]}" | fzf --prompt='Pick model > ' --height=15 --reverse --border)"
    else
      PS3="Pick a model #: "
      select choice in "${models[@]}"; do
        [[ -n "$choice" ]] && break
        echo "Invalid selection."
      done
    fi
    if [[ -n "$choice" ]]; then
      juju switch "$choice"
    else
      echo "No selection made."
      return 1
    fi
  fi
}
alias jwm="_jwm"
_jj () 
{ 
    local target=$1;
    local service=${2:-${1%%/*}};
    juju ssh "$target" -- SYSTEMD_COLORS=1 journalctl -f --output=cat -u "$service"
}
alias jj="_jj"
